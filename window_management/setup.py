#!/usr/bin/env python3
"""
Setup script for the Window Management system.
"""

import os
import sys
import subprocess
import logging
from pathlib import Path

# Add the parent directory to the path so we can import our modules
sys.path.insert(0, str(Path(__file__).parent.parent))

from window_management.utils import (
    check_dependencies, 
    install_dependencies, 
    get_system_info,
    create_desktop_shortcut
)
from window_management.config import *


def setup_logging():
    """Set up logging for the setup process."""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )


def check_system_requirements():
    """Check if the system meets the requirements."""
    print("Checking system requirements...")
    
    system_info = get_system_info()
    
    # Check OS
    if system_info['os'] not in ['ubuntu', 'linux']:
        print(f"⚠️  Warning: This system is designed for Ubuntu/Linux. "
              f"Current OS: {system_info['os']}")
    else:
        print(f"✅ OS: {system_info['os']}")
    
    # Check display server
    if system_info['display_server'] == 'x11':
        print("✅ Display server: X11")
    elif system_info['display_server'] == 'wayland':
        print("⚠️  Warning: Wayland detected. Some features may not work properly.")
    else:
        print("❌ No display server detected")
        return False
    
    # Check Python version
    python_version = system_info['python_version']
    if python_version.startswith('3.9') or python_version.startswith('3.1'):
        print(f"✅ Python version: {python_version.split()[0]}")
    else:
        print(f"⚠️  Warning: Python 3.9+ recommended. Current: {python_version.split()[0]}")
    
    return True


def install_system_dependencies():
    """Install system-level dependencies."""
    print("\nInstalling system dependencies...")
    
    system_info = get_system_info()
    
    if system_info['os'] in ['ubuntu', 'linux']:
        try:
            # Update package list
            subprocess.run(['sudo', 'apt', 'update'], check=True, capture_output=True)
            
            # Install required packages
            packages = [
                'python3-pip',
                'python3-dev',
                'python3-venv',
                'x11-utils',
                'wmctrl',
                'xdotool'
            ]
            
            for package in packages:
                print(f"Installing {package}...")
                subprocess.run(['sudo', 'apt', 'install', '-y', package], 
                             check=True, capture_output=True)
                print(f"✅ {package} installed")
            
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"❌ Failed to install system dependencies: {e}")
            return False
    else:
        print("⚠️  System dependencies installation not supported for this OS")
        return True


def install_python_dependencies():
    """Install Python dependencies."""
    print("\nInstalling Python dependencies...")
    
    # Check current dependencies
    dependencies = check_dependencies()
    missing = [dep for dep, available in dependencies.items() if not available]
    
    if not missing:
        print("✅ All Python dependencies are already installed")
        return True
    
    print(f"Missing dependencies: {', '.join(missing)}")
    
    # Try to install missing dependencies
    if install_dependencies():
        print("✅ Python dependencies installed successfully")
        return True
    else:
        print("❌ Failed to install Python dependencies")
        return False


def create_configuration():
    """Create configuration files."""
    print("\nCreating configuration files...")
    
    config_dir = Path.home() / '.config' / 'screen_machine'
    config_dir.mkdir(parents=True, exist_ok=True)
    
    # Create main config file
    config_file = config_dir / 'window_management.conf'
    if not config_file.exists():
        config_content = f"""# Window Management Configuration
# Generated by setup script

[Display]
default_display = {DEFAULT_DISPLAY}
default_screen = {DEFAULT_SCREEN}

[Window]
default_size = {DEFAULT_WINDOW_SIZE}
default_position = {DEFAULT_WINDOW_POSITION}
min_size = {MIN_WINDOW_SIZE}
max_size = {MAX_WINDOW_SIZE}

[Browser]
default_browser = {DEFAULT_BROWSER}

[Layout]
auto_arrange = {WINDOW_MANAGEMENT['auto_arrange']}
snap_to_grid = {WINDOW_MANAGEMENT['snap_to_grid']}
grid_size = {WINDOW_MANAGEMENT['grid_size']}
window_margin = {WINDOW_MANAGEMENT['window_margin']}

[Performance]
max_windows = {PERFORMANCE['max_windows']}
refresh_rate = {PERFORMANCE['refresh_rate']}
memory_limit = {PERFORMANCE['memory_limit']}
cpu_limit = {PERFORMANCE['cpu_limit']}
"""
        
        with open(config_file, 'w') as f:
            f.write(config_content)
        
        print(f"✅ Configuration file created: {config_file}")
    
    # Create log directory
    log_dir = config_dir / 'logs'
    log_dir.mkdir(exist_ok=True)
    print(f"✅ Log directory created: {log_dir}")
    
    return True


def create_desktop_shortcuts():
    """Create desktop shortcuts for easy access."""
    print("\nCreating desktop shortcuts...")
    
    # Get the path to the CLI script
    cli_path = Path(__file__).parent / 'cli.py'
    demo_path = Path(__file__).parent / 'demo.py'
    
    if cli_path.exists():
        cli_command = f"python3 {cli_path}"
        if create_desktop_shortcut("Window Management CLI", cli_command):
            print("✅ CLI shortcut created")
        else:
            print("❌ Failed to create CLI shortcut")
    
    if demo_path.exists():
        demo_command = f"python3 {demo_path}"
        if create_desktop_shortcut("Window Management Demo", demo_command):
            print("✅ Demo shortcut created")
        else:
            print("❌ Failed to create demo shortcut")
    
    return True


def run_tests():
    """Run the test suite to verify installation."""
    print("\nRunning tests...")
    
    test_dir = Path(__file__).parent / 'tests'
    if not test_dir.exists():
        print("⚠️  Test directory not found, skipping tests")
        return True
    
    try:
        # Run tests
        result = subprocess.run([
            sys.executable, '-m', 'unittest', 'discover', 
            str(test_dir), '-v'
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("✅ All tests passed")
            return True
        else:
            print("❌ Some tests failed")
            print("Test output:")
            print(result.stdout)
            print("Test errors:")
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"❌ Failed to run tests: {e}")
        return False


def create_usage_examples():
    """Create usage examples and documentation."""
    print("\nCreating usage examples...")
    
    examples_dir = Path(__file__).parent / 'examples'
    examples_dir.mkdir(exist_ok=True)
    
    # Basic usage example
    basic_example = examples_dir / 'basic_usage.py'
    if not basic_example.exists():
        basic_content = '''#!/usr/bin/env python3
"""
Basic usage example for the Window Management system.
"""

from window_management import WindowManager

def main():
    # Initialize window manager
    with WindowManager() as wm:
        # Create a browser window
        browser_window = wm.create_browser_window(
            url="https://www.google.com",
            position=(100, 100),
            size=(800, 600)
        )
        print(f"Created browser window: {browser_window.id}")
        
        # Create an application window
        app_window = wm.create_application_window(
            command="gedit",
            position=(900, 100),
            size=(600, 400)
        )
        print(f"Created application window: {app_window.id}")
        
        # List all windows
        windows = wm.list_windows()
        print(f"Total windows: {len(windows)}")
        
        # Arrange windows
        wm.arrange_windows("grid")
        print("Windows arranged")

if __name__ == "__main__":
    main()
'''
        
        with open(basic_example, 'w') as f:
            f.write(basic_content)
        
        # Make executable
        basic_example.chmod(0o755)
        print("✅ Basic usage example created")
    
    # CLI usage example
    cli_example = examples_dir / 'cli_usage.sh'
    if not cli_example.exists():
        cli_content = '''#!/bin/bash
# CLI usage examples for the Window Management system

echo "Window Management CLI Examples"
echo "=============================="

echo ""
echo "1. Create a browser window:"
echo "python3 -m window_management.cli browser --url https://www.google.com --position 100,100 --size 800x600"

echo ""
echo "2. Create an application window:"
echo "python3 -m window_management.cli app --command gedit --position 200,200 --size 600x400"

echo ""
echo "3. List all windows:"
echo "python3 -m window_management.cli list"

echo ""
echo "4. Arrange windows:"
echo "python3 -m window_management.cli arrange --algorithm grid"

echo ""
echo "5. Get window information:"
echo "python3 -m window_management.cli info --window-id 1"

echo ""
echo "6. Close a window:"
echo "python3 -m window_management.cli close --window-id 1"
'''
        
        with open(cli_example, 'w') as f:
            f.write(cli_content)
        
        # Make executable
        cli_example.chmod(0o755)
        print("✅ CLI usage example created")
    
    return True


def main():
    """Main setup function."""
    print("Window Management System Setup")
    print("=" * 40)
    
    setup_logging()
    
    try:
        # Check system requirements
        if not check_system_requirements():
            print("❌ System requirements not met")
            return 1
        
        # Install system dependencies
        if not install_system_dependencies():
            print("❌ Failed to install system dependencies")
            return 1
        
        # Install Python dependencies
        if not install_python_dependencies():
            print("❌ Failed to install Python dependencies")
            return 1
        
        # Create configuration
        if not create_configuration():
            print("❌ Failed to create configuration")
            return 1
        
        # Create desktop shortcuts
        if not create_desktop_shortcuts():
            print("⚠️  Failed to create some desktop shortcuts")
        
        # Create usage examples
        if not create_usage_examples():
            print("⚠️  Failed to create some usage examples")
        
        # Run tests
        if not run_tests():
            print("⚠️  Some tests failed, but installation may still work")
        
        print("\n" + "=" * 40)
        print("✅ Setup completed successfully!")
        print("\nNext steps:")
        print("1. Try the demo: python3 -m window_management.demo")
        print("2. Use the CLI: python3 -m window_management.cli --help")
        print("3. Check the examples in the examples/ directory")
        print("4. Read the README.md for more information")
        
        return 0
        
    except KeyboardInterrupt:
        print("\n❌ Setup interrupted by user")
        return 1
    except Exception as e:
        print(f"\n❌ Setup failed with error: {e}")
        logging.error(f"Setup error: {e}", exc_info=True)
        return 1


if __name__ == '__main__':
    sys.exit(main())
